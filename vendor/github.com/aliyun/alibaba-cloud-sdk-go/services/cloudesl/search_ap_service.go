package cloudesl

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SearchApService invokes the cloudesl.SearchApService API synchronously
func (client *Client) SearchApService(request *SearchApServiceRequest) (response *SearchApServiceResponse, err error) {
	response = CreateSearchApServiceResponse()
	err = client.DoAction(request, response)
	return
}

// SearchApServiceWithChan invokes the cloudesl.SearchApService API asynchronously
func (client *Client) SearchApServiceWithChan(request *SearchApServiceRequest) (<-chan *SearchApServiceResponse, <-chan error) {
	responseChan := make(chan *SearchApServiceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SearchApService(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SearchApServiceWithCallback invokes the cloudesl.SearchApService API asynchronously
func (client *Client) SearchApServiceWithCallback(request *SearchApServiceRequest, callback func(response *SearchApServiceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SearchApServiceResponse
		var err error
		defer close(result)
		response, err = client.SearchApService(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SearchApServiceRequest is the request struct for api SearchApService
type SearchApServiceRequest struct {
	*requests.RpcRequest
	ApMac      string           `position:"Query" name:"ApMac"`
	StoreId    string           `position:"Query" name:"StoreId"`
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
	Activated  requests.Boolean `position:"Query" name:"Activated"`
}

// SearchApServiceResponse is the response struct for api SearchApService
type SearchApServiceResponse struct {
	*responses.BaseResponse
	RequestId  string                 `json:"RequestId" xml:"RequestId"`
	Success    bool                   `json:"Success" xml:"Success"`
	Message    string                 `json:"Message" xml:"Message"`
	ErrorCode  string                 `json:"ErrorCode" xml:"ErrorCode"`
	TotalCount int                    `json:"TotalCount" xml:"TotalCount"`
	PageNumber int                    `json:"PageNumber" xml:"PageNumber"`
	PageSize   int                    `json:"PageSize" xml:"PageSize"`
	Items      ItemsInSearchApService `json:"Items" xml:"Items"`
}

// CreateSearchApServiceRequest creates a request to invoke SearchApService API
func CreateSearchApServiceRequest() (request *SearchApServiceRequest) {
	request = &SearchApServiceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cloudesl", "2018-08-01", "SearchApService", "cloudesl", "openAPI")
	request.Method = requests.POST
	return
}

// CreateSearchApServiceResponse creates a response to parse from SearchApService response
func CreateSearchApServiceResponse() (response *SearchApServiceResponse) {
	response = &SearchApServiceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
