package ens

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateEPInstance invokes the ens.CreateEPInstance API synchronously
func (client *Client) CreateEPInstance(request *CreateEPInstanceRequest) (response *CreateEPInstanceResponse, err error) {
	response = CreateCreateEPInstanceResponse()
	err = client.DoAction(request, response)
	return
}

// CreateEPInstanceWithChan invokes the ens.CreateEPInstance API asynchronously
func (client *Client) CreateEPInstanceWithChan(request *CreateEPInstanceRequest) (<-chan *CreateEPInstanceResponse, <-chan error) {
	responseChan := make(chan *CreateEPInstanceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateEPInstance(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateEPInstanceWithCallback invokes the ens.CreateEPInstance API asynchronously
func (client *Client) CreateEPInstanceWithCallback(request *CreateEPInstanceRequest, callback func(response *CreateEPInstanceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateEPInstanceResponse
		var err error
		defer close(result)
		response, err = client.CreateEPInstance(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateEPInstanceRequest is the request struct for api CreateEPInstance
type CreateEPInstanceRequest struct {
	*requests.RpcRequest
	NetworkingModel         string           `position:"Query" name:"NetworkingModel"`
	InternetMaxBandwidthOut requests.Integer `position:"Query" name:"InternetMaxBandwidthOut"`
	EPNInstanceType         string           `position:"Query" name:"EPNInstanceType"`
	InternetChargeType      string           `position:"Query" name:"InternetChargeType"`
	EPNInstanceName         string           `position:"Query" name:"EPNInstanceName"`
}

// CreateEPInstanceResponse is the response struct for api CreateEPInstance
type CreateEPInstanceResponse struct {
	*responses.BaseResponse
	RequestId     string `json:"RequestId" xml:"RequestId"`
	EPNInstanceId string `json:"EPNInstanceId" xml:"EPNInstanceId"`
}

// CreateCreateEPInstanceRequest creates a request to invoke CreateEPInstance API
func CreateCreateEPInstanceRequest() (request *CreateEPInstanceRequest) {
	request = &CreateEPInstanceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ens", "2017-11-10", "CreateEPInstance", "ens", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateEPInstanceResponse creates a response to parse from CreateEPInstance response
func CreateCreateEPInstanceResponse() (response *CreateEPInstanceResponse) {
	response = &CreateEPInstanceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
