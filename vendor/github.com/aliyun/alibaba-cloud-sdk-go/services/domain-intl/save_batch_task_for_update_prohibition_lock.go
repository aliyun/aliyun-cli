package domain_intl

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SaveBatchTaskForUpdateProhibitionLock invokes the domain_intl.SaveBatchTaskForUpdateProhibitionLock API synchronously
// api document: https://help.aliyun.com/api/domain-intl/savebatchtaskforupdateprohibitionlock.html
func (client *Client) SaveBatchTaskForUpdateProhibitionLock(request *SaveBatchTaskForUpdateProhibitionLockRequest) (response *SaveBatchTaskForUpdateProhibitionLockResponse, err error) {
	response = CreateSaveBatchTaskForUpdateProhibitionLockResponse()
	err = client.DoAction(request, response)
	return
}

// SaveBatchTaskForUpdateProhibitionLockWithChan invokes the domain_intl.SaveBatchTaskForUpdateProhibitionLock API asynchronously
// api document: https://help.aliyun.com/api/domain-intl/savebatchtaskforupdateprohibitionlock.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SaveBatchTaskForUpdateProhibitionLockWithChan(request *SaveBatchTaskForUpdateProhibitionLockRequest) (<-chan *SaveBatchTaskForUpdateProhibitionLockResponse, <-chan error) {
	responseChan := make(chan *SaveBatchTaskForUpdateProhibitionLockResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SaveBatchTaskForUpdateProhibitionLock(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SaveBatchTaskForUpdateProhibitionLockWithCallback invokes the domain_intl.SaveBatchTaskForUpdateProhibitionLock API asynchronously
// api document: https://help.aliyun.com/api/domain-intl/savebatchtaskforupdateprohibitionlock.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SaveBatchTaskForUpdateProhibitionLockWithCallback(request *SaveBatchTaskForUpdateProhibitionLockRequest, callback func(response *SaveBatchTaskForUpdateProhibitionLockResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SaveBatchTaskForUpdateProhibitionLockResponse
		var err error
		defer close(result)
		response, err = client.SaveBatchTaskForUpdateProhibitionLock(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SaveBatchTaskForUpdateProhibitionLockRequest is the request struct for api SaveBatchTaskForUpdateProhibitionLock
type SaveBatchTaskForUpdateProhibitionLockRequest struct {
	*requests.RpcRequest
	UserClientIp string           `position:"Query" name:"UserClientIp"`
	DomainName   *[]string        `position:"Query" name:"DomainName"  type:"Repeated"`
	Lang         string           `position:"Query" name:"Lang"`
	Status       requests.Boolean `position:"Query" name:"Status"`
}

// SaveBatchTaskForUpdateProhibitionLockResponse is the response struct for api SaveBatchTaskForUpdateProhibitionLock
type SaveBatchTaskForUpdateProhibitionLockResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	TaskNo    string `json:"TaskNo" xml:"TaskNo"`
}

// CreateSaveBatchTaskForUpdateProhibitionLockRequest creates a request to invoke SaveBatchTaskForUpdateProhibitionLock API
func CreateSaveBatchTaskForUpdateProhibitionLockRequest() (request *SaveBatchTaskForUpdateProhibitionLockRequest) {
	request = &SaveBatchTaskForUpdateProhibitionLockRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain-intl", "2017-12-18", "SaveBatchTaskForUpdateProhibitionLock", "domain", "openAPI")
	return
}

// CreateSaveBatchTaskForUpdateProhibitionLockResponse creates a response to parse from SaveBatchTaskForUpdateProhibitionLock response
func CreateSaveBatchTaskForUpdateProhibitionLockResponse() (response *SaveBatchTaskForUpdateProhibitionLockResponse) {
	response = &SaveBatchTaskForUpdateProhibitionLockResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
