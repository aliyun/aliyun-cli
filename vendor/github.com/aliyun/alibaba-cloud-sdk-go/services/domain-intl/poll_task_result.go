package domain_intl

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PollTaskResult invokes the domain_intl.PollTaskResult API synchronously
// api document: https://help.aliyun.com/api/domain-intl/polltaskresult.html
func (client *Client) PollTaskResult(request *PollTaskResultRequest) (response *PollTaskResultResponse, err error) {
	response = CreatePollTaskResultResponse()
	err = client.DoAction(request, response)
	return
}

// PollTaskResultWithChan invokes the domain_intl.PollTaskResult API asynchronously
// api document: https://help.aliyun.com/api/domain-intl/polltaskresult.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PollTaskResultWithChan(request *PollTaskResultRequest) (<-chan *PollTaskResultResponse, <-chan error) {
	responseChan := make(chan *PollTaskResultResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PollTaskResult(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// PollTaskResultWithCallback invokes the domain_intl.PollTaskResult API asynchronously
// api document: https://help.aliyun.com/api/domain-intl/polltaskresult.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PollTaskResultWithCallback(request *PollTaskResultRequest, callback func(response *PollTaskResultResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PollTaskResultResponse
		var err error
		defer close(result)
		response, err = client.PollTaskResult(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// PollTaskResultRequest is the request struct for api PollTaskResult
type PollTaskResultRequest struct {
	*requests.RpcRequest
	InstanceId       string           `position:"Query" name:"InstanceId"`
	UserClientIp     string           `position:"Query" name:"UserClientIp"`
	TaskNo           string           `position:"Query" name:"TaskNo"`
	DomainName       string           `position:"Query" name:"DomainName"`
	PageSize         requests.Integer `position:"Query" name:"PageSize"`
	Lang             string           `position:"Query" name:"Lang"`
	PageNum          requests.Integer `position:"Query" name:"PageNum"`
	TaskResultStatus requests.Integer `position:"Query" name:"TaskResultStatus"`
}

// PollTaskResultResponse is the response struct for api PollTaskResult
type PollTaskResultResponse struct {
	*responses.BaseResponse
	RequestId      string               `json:"RequestId" xml:"RequestId"`
	TotalItemNum   int                  `json:"TotalItemNum" xml:"TotalItemNum"`
	CurrentPageNum int                  `json:"CurrentPageNum" xml:"CurrentPageNum"`
	TotalPageNum   int                  `json:"TotalPageNum" xml:"TotalPageNum"`
	PageSize       int                  `json:"PageSize" xml:"PageSize"`
	PrePage        bool                 `json:"PrePage" xml:"PrePage"`
	NextPage       bool                 `json:"NextPage" xml:"NextPage"`
	Data           DataInPollTaskResult `json:"Data" xml:"Data"`
}

// CreatePollTaskResultRequest creates a request to invoke PollTaskResult API
func CreatePollTaskResultRequest() (request *PollTaskResultRequest) {
	request = &PollTaskResultRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain-intl", "2017-12-18", "PollTaskResult", "domain", "openAPI")
	return
}

// CreatePollTaskResultResponse creates a response to parse from PollTaskResult response
func CreatePollTaskResultResponse() (response *PollTaskResultResponse) {
	response = &PollTaskResultResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
