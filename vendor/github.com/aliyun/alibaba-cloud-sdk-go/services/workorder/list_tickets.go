package workorder

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListTickets invokes the workorder.ListTickets API synchronously
// api document: https://help.aliyun.com/api/workorder/listtickets.html
func (client *Client) ListTickets(request *ListTicketsRequest) (response *ListTicketsResponse, err error) {
	response = CreateListTicketsResponse()
	err = client.DoAction(request, response)
	return
}

// ListTicketsWithChan invokes the workorder.ListTickets API asynchronously
// api document: https://help.aliyun.com/api/workorder/listtickets.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListTicketsWithChan(request *ListTicketsRequest) (<-chan *ListTicketsResponse, <-chan error) {
	responseChan := make(chan *ListTicketsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListTickets(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListTicketsWithCallback invokes the workorder.ListTickets API asynchronously
// api document: https://help.aliyun.com/api/workorder/listtickets.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListTicketsWithCallback(request *ListTicketsRequest, callback func(response *ListTicketsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListTicketsResponse
		var err error
		defer close(result)
		response, err = client.ListTickets(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListTicketsRequest is the request struct for api ListTickets
type ListTicketsRequest struct {
	*requests.RpcRequest
	ProductCode       string           `position:"Query" name:"ProductCode"`
	Language          string           `position:"Query" name:"Language"`
	SubUserId         string           `position:"Query" name:"SubUserId"`
	CreatedBeforeTime requests.Integer `position:"Query" name:"CreatedBeforeTime"`
	PageSize          requests.Integer `position:"Query" name:"PageSize"`
	Ids               string           `position:"Query" name:"Ids"`
	TicketStatus      string           `position:"Query" name:"TicketStatus"`
	PageStart         requests.Integer `position:"Query" name:"PageStart"`
	CreatedAfterTime  requests.Integer `position:"Query" name:"CreatedAfterTime"`
}

// ListTicketsResponse is the response struct for api ListTickets
type ListTicketsResponse struct {
	*responses.BaseResponse
	Code      int    `json:"Code" xml:"Code"`
	Success   bool   `json:"Success" xml:"Success"`
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Data      Data   `json:"Data" xml:"Data"`
}

// CreateListTicketsRequest creates a request to invoke ListTickets API
func CreateListTicketsRequest() (request *ListTicketsRequest) {
	request = &ListTicketsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Workorder", "2020-03-26", "ListTickets", "workorder", "openAPI")
	return
}

// CreateListTicketsResponse creates a response to parse from ListTickets response
func CreateListTicketsResponse() (response *ListTicketsResponse) {
	response = &ListTicketsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
