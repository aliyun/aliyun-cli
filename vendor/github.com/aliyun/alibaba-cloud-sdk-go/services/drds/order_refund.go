package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// OrderRefund invokes the drds.OrderRefund API synchronously
func (client *Client) OrderRefund(request *OrderRefundRequest) (response *OrderRefundResponse, err error) {
	response = CreateOrderRefundResponse()
	err = client.DoAction(request, response)
	return
}

// OrderRefundWithChan invokes the drds.OrderRefund API asynchronously
func (client *Client) OrderRefundWithChan(request *OrderRefundRequest) (<-chan *OrderRefundResponse, <-chan error) {
	responseChan := make(chan *OrderRefundResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OrderRefund(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// OrderRefundWithCallback invokes the drds.OrderRefund API asynchronously
func (client *Client) OrderRefundWithCallback(request *OrderRefundRequest, callback func(response *OrderRefundResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OrderRefundResponse
		var err error
		defer close(result)
		response, err = client.OrderRefund(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// OrderRefundRequest is the request struct for api OrderRefund
type OrderRefundRequest struct {
	*requests.RpcRequest
	Data string `position:"Query" name:"data"`
}

// OrderRefundResponse is the response struct for api OrderRefund
type OrderRefundResponse struct {
	*responses.BaseResponse
	RequestId string `json:"requestId" xml:"requestId"`
	Data      string `json:"data" xml:"data"`
	Code      string `json:"code" xml:"code"`
	Success   bool   `json:"success" xml:"success"`
	Message   string `json:"message" xml:"message"`
}

// CreateOrderRefundRequest creates a request to invoke OrderRefund API
func CreateOrderRefundRequest() (request *OrderRefundRequest) {
	request = &OrderRefundRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2016-12-13", "OrderRefund", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateOrderRefundResponse creates a response to parse from OrderRefund response
func CreateOrderRefundResponse() (response *OrderRefundResponse) {
	response = &OrderRefundResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
