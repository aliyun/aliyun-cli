package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateEvaluateDataImportPreCheckTask invokes the drds.CreateEvaluateDataImportPreCheckTask API synchronously
func (client *Client) CreateEvaluateDataImportPreCheckTask(request *CreateEvaluateDataImportPreCheckTaskRequest) (response *CreateEvaluateDataImportPreCheckTaskResponse, err error) {
	response = CreateCreateEvaluateDataImportPreCheckTaskResponse()
	err = client.DoAction(request, response)
	return
}

// CreateEvaluateDataImportPreCheckTaskWithChan invokes the drds.CreateEvaluateDataImportPreCheckTask API asynchronously
func (client *Client) CreateEvaluateDataImportPreCheckTaskWithChan(request *CreateEvaluateDataImportPreCheckTaskRequest) (<-chan *CreateEvaluateDataImportPreCheckTaskResponse, <-chan error) {
	responseChan := make(chan *CreateEvaluateDataImportPreCheckTaskResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateEvaluateDataImportPreCheckTask(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateEvaluateDataImportPreCheckTaskWithCallback invokes the drds.CreateEvaluateDataImportPreCheckTask API asynchronously
func (client *Client) CreateEvaluateDataImportPreCheckTaskWithCallback(request *CreateEvaluateDataImportPreCheckTaskRequest, callback func(response *CreateEvaluateDataImportPreCheckTaskResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateEvaluateDataImportPreCheckTaskResponse
		var err error
		defer close(result)
		response, err = client.CreateEvaluateDataImportPreCheckTask(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateEvaluateDataImportPreCheckTaskRequest is the request struct for api CreateEvaluateDataImportPreCheckTask
type CreateEvaluateDataImportPreCheckTaskRequest struct {
	*requests.RpcRequest
	ImportParam string `position:"Query" name:"ImportParam"`
}

// CreateEvaluateDataImportPreCheckTaskResponse is the response struct for api CreateEvaluateDataImportPreCheckTask
type CreateEvaluateDataImportPreCheckTaskResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	TaskId    int64  `json:"TaskId" xml:"TaskId"`
}

// CreateCreateEvaluateDataImportPreCheckTaskRequest creates a request to invoke CreateEvaluateDataImportPreCheckTask API
func CreateCreateEvaluateDataImportPreCheckTaskRequest() (request *CreateEvaluateDataImportPreCheckTaskRequest) {
	request = &CreateEvaluateDataImportPreCheckTaskRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "CreateEvaluateDataImportPreCheckTask", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateEvaluateDataImportPreCheckTaskResponse creates a response to parse from CreateEvaluateDataImportPreCheckTask response
func CreateCreateEvaluateDataImportPreCheckTaskResponse() (response *CreateEvaluateDataImportPreCheckTaskResponse) {
	response = &CreateEvaluateDataImportPreCheckTaskResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
