package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeEvaluateTasks invokes the drds.DescribeEvaluateTasks API synchronously
func (client *Client) DescribeEvaluateTasks(request *DescribeEvaluateTasksRequest) (response *DescribeEvaluateTasksResponse, err error) {
	response = CreateDescribeEvaluateTasksResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeEvaluateTasksWithChan invokes the drds.DescribeEvaluateTasks API asynchronously
func (client *Client) DescribeEvaluateTasksWithChan(request *DescribeEvaluateTasksRequest) (<-chan *DescribeEvaluateTasksResponse, <-chan error) {
	responseChan := make(chan *DescribeEvaluateTasksResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeEvaluateTasks(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeEvaluateTasksWithCallback invokes the drds.DescribeEvaluateTasks API asynchronously
func (client *Client) DescribeEvaluateTasksWithCallback(request *DescribeEvaluateTasksRequest, callback func(response *DescribeEvaluateTasksResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeEvaluateTasksResponse
		var err error
		defer close(result)
		response, err = client.DescribeEvaluateTasks(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeEvaluateTasksRequest is the request struct for api DescribeEvaluateTasks
type DescribeEvaluateTasksRequest struct {
	*requests.RpcRequest
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
}

// DescribeEvaluateTasksResponse is the response struct for api DescribeEvaluateTasks
type DescribeEvaluateTasksResponse struct {
	*responses.BaseResponse
	RequestId  string                      `json:"RequestId" xml:"RequestId"`
	Success    bool                        `json:"Success" xml:"Success"`
	PageNumber int                         `json:"PageNumber" xml:"PageNumber"`
	PageSize   int                         `json:"PageSize" xml:"PageSize"`
	Total      int                         `json:"Total" xml:"Total"`
	Data       DataInDescribeEvaluateTasks `json:"Data" xml:"Data"`
}

// CreateDescribeEvaluateTasksRequest creates a request to invoke DescribeEvaluateTasks API
func CreateDescribeEvaluateTasksRequest() (request *DescribeEvaluateTasksRequest) {
	request = &DescribeEvaluateTasksRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "DescribeEvaluateTasks", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeEvaluateTasksResponse creates a response to parse from DescribeEvaluateTasks response
func CreateDescribeEvaluateTasksResponse() (response *DescribeEvaluateTasksResponse) {
	response = &DescribeEvaluateTasksResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
