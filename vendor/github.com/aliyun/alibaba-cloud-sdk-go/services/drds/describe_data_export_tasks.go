package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDataExportTasks invokes the drds.DescribeDataExportTasks API synchronously
func (client *Client) DescribeDataExportTasks(request *DescribeDataExportTasksRequest) (response *DescribeDataExportTasksResponse, err error) {
	response = CreateDescribeDataExportTasksResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDataExportTasksWithChan invokes the drds.DescribeDataExportTasks API asynchronously
func (client *Client) DescribeDataExportTasksWithChan(request *DescribeDataExportTasksRequest) (<-chan *DescribeDataExportTasksResponse, <-chan error) {
	responseChan := make(chan *DescribeDataExportTasksResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDataExportTasks(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDataExportTasksWithCallback invokes the drds.DescribeDataExportTasks API asynchronously
func (client *Client) DescribeDataExportTasksWithCallback(request *DescribeDataExportTasksRequest, callback func(response *DescribeDataExportTasksResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDataExportTasksResponse
		var err error
		defer close(result)
		response, err = client.DescribeDataExportTasks(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDataExportTasksRequest is the request struct for api DescribeDataExportTasks
type DescribeDataExportTasksRequest struct {
	*requests.RpcRequest
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
}

// DescribeDataExportTasksResponse is the response struct for api DescribeDataExportTasks
type DescribeDataExportTasksResponse struct {
	*responses.BaseResponse
	RequestId  string                        `json:"RequestId" xml:"RequestId"`
	Success    bool                          `json:"Success" xml:"Success"`
	PageNumber int                           `json:"PageNumber" xml:"PageNumber"`
	PageSize   int                           `json:"PageSize" xml:"PageSize"`
	Total      int                           `json:"Total" xml:"Total"`
	Data       DataInDescribeDataExportTasks `json:"Data" xml:"Data"`
}

// CreateDescribeDataExportTasksRequest creates a request to invoke DescribeDataExportTasks API
func CreateDescribeDataExportTasksRequest() (request *DescribeDataExportTasksRequest) {
	request = &DescribeDataExportTasksRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "DescribeDataExportTasks", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeDataExportTasksResponse creates a response to parse from DescribeDataExportTasks response
func CreateDescribeDataExportTasksResponse() (response *DescribeDataExportTasksResponse) {
	response = &DescribeDataExportTasksResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
