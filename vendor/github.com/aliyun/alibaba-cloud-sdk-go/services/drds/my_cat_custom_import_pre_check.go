package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// MyCatCustomImportPreCheck invokes the drds.MyCatCustomImportPreCheck API synchronously
func (client *Client) MyCatCustomImportPreCheck(request *MyCatCustomImportPreCheckRequest) (response *MyCatCustomImportPreCheckResponse, err error) {
	response = CreateMyCatCustomImportPreCheckResponse()
	err = client.DoAction(request, response)
	return
}

// MyCatCustomImportPreCheckWithChan invokes the drds.MyCatCustomImportPreCheck API asynchronously
func (client *Client) MyCatCustomImportPreCheckWithChan(request *MyCatCustomImportPreCheckRequest) (<-chan *MyCatCustomImportPreCheckResponse, <-chan error) {
	responseChan := make(chan *MyCatCustomImportPreCheckResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.MyCatCustomImportPreCheck(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// MyCatCustomImportPreCheckWithCallback invokes the drds.MyCatCustomImportPreCheck API asynchronously
func (client *Client) MyCatCustomImportPreCheckWithCallback(request *MyCatCustomImportPreCheckRequest, callback func(response *MyCatCustomImportPreCheckResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *MyCatCustomImportPreCheckResponse
		var err error
		defer close(result)
		response, err = client.MyCatCustomImportPreCheck(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// MyCatCustomImportPreCheckRequest is the request struct for api MyCatCustomImportPreCheck
type MyCatCustomImportPreCheckRequest struct {
	*requests.RpcRequest
	DstPort           requests.Integer `position:"Query" name:"DstPort"`
	TaskName          string           `position:"Query" name:"TaskName"`
	SchemaUrl         string           `position:"Query" name:"SchemaUrl"`
	DstUser           string           `position:"Query" name:"DstUser"`
	DstDbNme          string           `position:"Query" name:"DstDbNme"`
	TableMap          string           `position:"Query" name:"TableMap"`
	ImportDb          string           `position:"Query" name:"ImportDb"`
	DstPwd            string           `position:"Query" name:"DstPwd"`
	RuleUrl           string           `position:"Query" name:"RuleUrl"`
	DstDrdsInstanceId string           `position:"Query" name:"DstDrdsInstanceId"`
}

// MyCatCustomImportPreCheckResponse is the response struct for api MyCatCustomImportPreCheck
type MyCatCustomImportPreCheckResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      int64  `json:"Data" xml:"Data"`
}

// CreateMyCatCustomImportPreCheckRequest creates a request to invoke MyCatCustomImportPreCheck API
func CreateMyCatCustomImportPreCheckRequest() (request *MyCatCustomImportPreCheckRequest) {
	request = &MyCatCustomImportPreCheckRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "MyCatCustomImportPreCheck", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateMyCatCustomImportPreCheckResponse creates a response to parse from MyCatCustomImportPreCheck response
func CreateMyCatCustomImportPreCheckResponse() (response *MyCatCustomImportPreCheckResponse) {
	response = &MyCatCustomImportPreCheckResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
