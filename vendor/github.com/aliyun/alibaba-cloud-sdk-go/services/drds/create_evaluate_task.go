package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateEvaluateTask invokes the drds.CreateEvaluateTask API synchronously
func (client *Client) CreateEvaluateTask(request *CreateEvaluateTaskRequest) (response *CreateEvaluateTaskResponse, err error) {
	response = CreateCreateEvaluateTaskResponse()
	err = client.DoAction(request, response)
	return
}

// CreateEvaluateTaskWithChan invokes the drds.CreateEvaluateTask API asynchronously
func (client *Client) CreateEvaluateTaskWithChan(request *CreateEvaluateTaskRequest) (<-chan *CreateEvaluateTaskResponse, <-chan error) {
	responseChan := make(chan *CreateEvaluateTaskResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateEvaluateTask(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateEvaluateTaskWithCallback invokes the drds.CreateEvaluateTask API asynchronously
func (client *Client) CreateEvaluateTaskWithCallback(request *CreateEvaluateTaskRequest, callback func(response *CreateEvaluateTaskResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateEvaluateTaskResponse
		var err error
		defer close(result)
		response, err = client.CreateEvaluateTask(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateEvaluateTaskRequest is the request struct for api CreateEvaluateTask
type CreateEvaluateTaskRequest struct {
	*requests.RpcRequest
	AvgQpsGrowthScale requests.Integer            `position:"Query" name:"AvgQpsGrowthScale"`
	TaskName          string                      `position:"Query" name:"TaskName"`
	DataGrowthScale   requests.Integer            `position:"Query" name:"DataGrowthScale"`
	DbInfo            *[]CreateEvaluateTaskDbInfo `position:"Query" name:"DbInfo"  type:"Repeated"`
	EvaluateHours     requests.Integer            `position:"Query" name:"EvaluateHours"`
}

// CreateEvaluateTaskDbInfo is a repeated param struct in CreateEvaluateTaskRequest
type CreateEvaluateTaskDbInfo struct {
	InstId     string `name:"InstId"`
	DbPort     string `name:"DbPort"`
	DbName     string `name:"DbName"`
	DbPassword string `name:"DbPassword"`
	DbUser     string `name:"DbUser"`
}

// CreateEvaluateTaskResponse is the response struct for api CreateEvaluateTask
type CreateEvaluateTaskResponse struct {
	*responses.BaseResponse
	RequestId string                   `json:"RequestId" xml:"RequestId"`
	Success   bool                     `json:"Success" xml:"Success"`
	Data      DataInCreateEvaluateTask `json:"Data" xml:"Data"`
}

// CreateCreateEvaluateTaskRequest creates a request to invoke CreateEvaluateTask API
func CreateCreateEvaluateTaskRequest() (request *CreateEvaluateTaskRequest) {
	request = &CreateEvaluateTaskRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "CreateEvaluateTask", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateEvaluateTaskResponse creates a response to parse from CreateEvaluateTask response
func CreateCreateEvaluateTaskResponse() (response *CreateEvaluateTaskResponse) {
	response = &CreateEvaluateTaskResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
