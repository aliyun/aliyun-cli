package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateMyCatCustomImport invokes the drds.CreateMyCatCustomImport API synchronously
func (client *Client) CreateMyCatCustomImport(request *CreateMyCatCustomImportRequest) (response *CreateMyCatCustomImportResponse, err error) {
	response = CreateCreateMyCatCustomImportResponse()
	err = client.DoAction(request, response)
	return
}

// CreateMyCatCustomImportWithChan invokes the drds.CreateMyCatCustomImport API asynchronously
func (client *Client) CreateMyCatCustomImportWithChan(request *CreateMyCatCustomImportRequest) (<-chan *CreateMyCatCustomImportResponse, <-chan error) {
	responseChan := make(chan *CreateMyCatCustomImportResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateMyCatCustomImport(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateMyCatCustomImportWithCallback invokes the drds.CreateMyCatCustomImport API asynchronously
func (client *Client) CreateMyCatCustomImportWithCallback(request *CreateMyCatCustomImportRequest, callback func(response *CreateMyCatCustomImportResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateMyCatCustomImportResponse
		var err error
		defer close(result)
		response, err = client.CreateMyCatCustomImport(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateMyCatCustomImportRequest is the request struct for api CreateMyCatCustomImport
type CreateMyCatCustomImportRequest struct {
	*requests.RpcRequest
	DstPort           requests.Integer `position:"Query" name:"DstPort"`
	TaskName          string           `position:"Query" name:"TaskName"`
	SchemaUrl         string           `position:"Query" name:"SchemaUrl"`
	DstUser           string           `position:"Query" name:"DstUser"`
	DstDbNme          string           `position:"Query" name:"DstDbNme"`
	TableMap          string           `position:"Query" name:"TableMap"`
	ImportDb          string           `position:"Query" name:"ImportDb"`
	DstPwd            string           `position:"Query" name:"DstPwd"`
	RuleUrl           string           `position:"Query" name:"RuleUrl"`
	DstDrdsInstanceId string           `position:"Query" name:"DstDrdsInstanceId"`
}

// CreateMyCatCustomImportResponse is the response struct for api CreateMyCatCustomImport
type CreateMyCatCustomImportResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      int64  `json:"Data" xml:"Data"`
}

// CreateCreateMyCatCustomImportRequest creates a request to invoke CreateMyCatCustomImport API
func CreateCreateMyCatCustomImportRequest() (request *CreateMyCatCustomImportRequest) {
	request = &CreateMyCatCustomImportRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "CreateMyCatCustomImport", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateMyCatCustomImportResponse creates a response to parse from CreateMyCatCustomImport response
func CreateCreateMyCatCustomImportResponse() (response *CreateMyCatCustomImportResponse) {
	response = &CreateMyCatCustomImportResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
