package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ProductInfoComplement invokes the drds.ProductInfoComplement API synchronously
func (client *Client) ProductInfoComplement(request *ProductInfoComplementRequest) (response *ProductInfoComplementResponse, err error) {
	response = CreateProductInfoComplementResponse()
	err = client.DoAction(request, response)
	return
}

// ProductInfoComplementWithChan invokes the drds.ProductInfoComplement API asynchronously
func (client *Client) ProductInfoComplementWithChan(request *ProductInfoComplementRequest) (<-chan *ProductInfoComplementResponse, <-chan error) {
	responseChan := make(chan *ProductInfoComplementResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ProductInfoComplement(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ProductInfoComplementWithCallback invokes the drds.ProductInfoComplement API asynchronously
func (client *Client) ProductInfoComplementWithCallback(request *ProductInfoComplementRequest, callback func(response *ProductInfoComplementResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ProductInfoComplementResponse
		var err error
		defer close(result)
		response, err = client.ProductInfoComplement(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ProductInfoComplementRequest is the request struct for api ProductInfoComplement
type ProductInfoComplementRequest struct {
	*requests.RpcRequest
	Gender string `position:"Query" name:"gender"`
	Name   string `position:"Query" name:"name"`
}

// ProductInfoComplementResponse is the response struct for api ProductInfoComplement
type ProductInfoComplementResponse struct {
	*responses.BaseResponse
	Data Data `json:"data" xml:"data"`
}

// CreateProductInfoComplementRequest creates a request to invoke ProductInfoComplement API
func CreateProductInfoComplementRequest() (request *ProductInfoComplementRequest) {
	request = &ProductInfoComplementRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2015-04-13", "ProductInfoComplement", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateProductInfoComplementResponse creates a response to parse from ProductInfoComplement response
func CreateProductInfoComplementResponse() (response *ProductInfoComplementResponse) {
	response = &ProductInfoComplementResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
