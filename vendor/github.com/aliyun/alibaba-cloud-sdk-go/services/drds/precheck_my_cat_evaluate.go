package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PrecheckMyCatEvaluate invokes the drds.PrecheckMyCatEvaluate API synchronously
func (client *Client) PrecheckMyCatEvaluate(request *PrecheckMyCatEvaluateRequest) (response *PrecheckMyCatEvaluateResponse, err error) {
	response = CreatePrecheckMyCatEvaluateResponse()
	err = client.DoAction(request, response)
	return
}

// PrecheckMyCatEvaluateWithChan invokes the drds.PrecheckMyCatEvaluate API asynchronously
func (client *Client) PrecheckMyCatEvaluateWithChan(request *PrecheckMyCatEvaluateRequest) (<-chan *PrecheckMyCatEvaluateResponse, <-chan error) {
	responseChan := make(chan *PrecheckMyCatEvaluateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PrecheckMyCatEvaluate(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// PrecheckMyCatEvaluateWithCallback invokes the drds.PrecheckMyCatEvaluate API asynchronously
func (client *Client) PrecheckMyCatEvaluateWithCallback(request *PrecheckMyCatEvaluateRequest, callback func(response *PrecheckMyCatEvaluateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PrecheckMyCatEvaluateResponse
		var err error
		defer close(result)
		response, err = client.PrecheckMyCatEvaluate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// PrecheckMyCatEvaluateRequest is the request struct for api PrecheckMyCatEvaluate
type PrecheckMyCatEvaluateRequest struct {
	*requests.RpcRequest
	SequenceType       requests.Integer `position:"Query" name:"SequenceType"`
	TaskName           string           `position:"Query" name:"TaskName"`
	SchemaUrl          string           `position:"Query" name:"SchemaUrl"`
	BusPeakQps         requests.Integer `position:"Query" name:"BusPeakQps"`
	QpsIncPercent      requests.Integer `position:"Query" name:"QpsIncPercent"`
	ServerUrl          string           `position:"Query" name:"ServerUrl"`
	CapacityIncPercent requests.Integer `position:"Query" name:"CapacityIncPercent"`
	RuleUrl            string           `position:"Query" name:"RuleUrl"`
	ImportDbList       *[]string        `position:"Query" name:"ImportDbList"  type:"Repeated"`
}

// PrecheckMyCatEvaluateResponse is the response struct for api PrecheckMyCatEvaluate
type PrecheckMyCatEvaluateResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      int64  `json:"Data" xml:"Data"`
}

// CreatePrecheckMyCatEvaluateRequest creates a request to invoke PrecheckMyCatEvaluate API
func CreatePrecheckMyCatEvaluateRequest() (request *PrecheckMyCatEvaluateRequest) {
	request = &PrecheckMyCatEvaluateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "PrecheckMyCatEvaluate", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreatePrecheckMyCatEvaluateResponse creates a response to parse from PrecheckMyCatEvaluate response
func CreatePrecheckMyCatEvaluateResponse() (response *PrecheckMyCatEvaluateResponse) {
	response = &PrecheckMyCatEvaluateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
