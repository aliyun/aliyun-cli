package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// MyCatConnectTest invokes the drds.MyCatConnectTest API synchronously
func (client *Client) MyCatConnectTest(request *MyCatConnectTestRequest) (response *MyCatConnectTestResponse, err error) {
	response = CreateMyCatConnectTestResponse()
	err = client.DoAction(request, response)
	return
}

// MyCatConnectTestWithChan invokes the drds.MyCatConnectTest API asynchronously
func (client *Client) MyCatConnectTestWithChan(request *MyCatConnectTestRequest) (<-chan *MyCatConnectTestResponse, <-chan error) {
	responseChan := make(chan *MyCatConnectTestResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.MyCatConnectTest(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// MyCatConnectTestWithCallback invokes the drds.MyCatConnectTest API asynchronously
func (client *Client) MyCatConnectTestWithCallback(request *MyCatConnectTestRequest, callback func(response *MyCatConnectTestResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *MyCatConnectTestResponse
		var err error
		defer close(result)
		response, err = client.MyCatConnectTest(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// MyCatConnectTestRequest is the request struct for api MyCatConnectTest
type MyCatConnectTestRequest struct {
	*requests.RpcRequest
	SchemaUrl string `position:"Query" name:"SchemaUrl"`
	DbName    string `position:"Query" name:"DbName"`
	RuleUrl   string `position:"Query" name:"RuleUrl"`
}

// MyCatConnectTestResponse is the response struct for api MyCatConnectTest
type MyCatConnectTestResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      bool   `json:"Data" xml:"Data"`
}

// CreateMyCatConnectTestRequest creates a request to invoke MyCatConnectTest API
func CreateMyCatConnectTestRequest() (request *MyCatConnectTestRequest) {
	request = &MyCatConnectTestRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2019-01-23", "MyCatConnectTest", "Drds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateMyCatConnectTestResponse creates a response to parse from MyCatConnectTest response
func CreateMyCatConnectTestResponse() (response *MyCatConnectTestResponse) {
	response = &MyCatConnectTestResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
