package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeSQLLogTemplates invokes the polardb.DescribeSQLLogTemplates API synchronously
func (client *Client) DescribeSQLLogTemplates(request *DescribeSQLLogTemplatesRequest) (response *DescribeSQLLogTemplatesResponse, err error) {
	response = CreateDescribeSQLLogTemplatesResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeSQLLogTemplatesWithChan invokes the polardb.DescribeSQLLogTemplates API asynchronously
func (client *Client) DescribeSQLLogTemplatesWithChan(request *DescribeSQLLogTemplatesRequest) (<-chan *DescribeSQLLogTemplatesResponse, <-chan error) {
	responseChan := make(chan *DescribeSQLLogTemplatesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeSQLLogTemplates(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeSQLLogTemplatesWithCallback invokes the polardb.DescribeSQLLogTemplates API asynchronously
func (client *Client) DescribeSQLLogTemplatesWithCallback(request *DescribeSQLLogTemplatesRequest, callback func(response *DescribeSQLLogTemplatesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeSQLLogTemplatesResponse
		var err error
		defer close(result)
		response, err = client.DescribeSQLLogTemplates(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeSQLLogTemplatesRequest is the request struct for api DescribeSQLLogTemplates
type DescribeSQLLogTemplatesRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	StartTime            string           `position:"Query" name:"StartTime"`
	JobId                string           `position:"Query" name:"JobId"`
	SortKey              string           `position:"Query" name:"SortKey"`
	MinAvgScanRows       requests.Float   `position:"Query" name:"MinAvgScanRows"`
	SecurityToken        string           `position:"Query" name:"SecurityToken"`
	PageNumbers          requests.Integer `position:"Query" name:"PageNumbers"`
	PagingId             string           `position:"Query" name:"PagingId"`
	DBInstanceId         string           `position:"Query" name:"DBInstanceId"`
	MaxAvgScanRows       requests.Float   `position:"Query" name:"MaxAvgScanRows"`
	SqlType              string           `position:"Query" name:"SqlType"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	MinAvgConsume        requests.Float   `position:"Query" name:"MinAvgConsume"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	MaxRecordsPerPage    requests.Integer `position:"Query" name:"MaxRecordsPerPage"`
	EndTime              string           `position:"Query" name:"EndTime"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	MaxAvgConsume        requests.Float   `position:"Query" name:"MaxAvgConsume"`
	ChildDBInstanceIDs   string           `position:"Query" name:"ChildDBInstanceIDs"`
	SortMethod           string           `position:"Query" name:"SortMethod"`
}

// DescribeSQLLogTemplatesResponse is the response struct for api DescribeSQLLogTemplates
type DescribeSQLLogTemplatesResponse struct {
	*responses.BaseResponse
	MaxRecordsPerPage int                            `json:"MaxRecordsPerPage" xml:"MaxRecordsPerPage"`
	ItemsNumbers      int                            `json:"ItemsNumbers" xml:"ItemsNumbers"`
	RequestId         string                         `json:"RequestId" xml:"RequestId"`
	EndTime           string                         `json:"EndTime" xml:"EndTime"`
	DBInstanceID      int                            `json:"DBInstanceID" xml:"DBInstanceID"`
	StartTime         string                         `json:"StartTime" xml:"StartTime"`
	TotalRecords      int                            `json:"TotalRecords" xml:"TotalRecords"`
	Finish            string                         `json:"Finish" xml:"Finish"`
	PageNumbers       int                            `json:"PageNumbers" xml:"PageNumbers"`
	JobId             string                         `json:"JobId" xml:"JobId"`
	PagingID          string                         `json:"PagingID" xml:"PagingID"`
	DBInstanceName    string                         `json:"DBInstanceName" xml:"DBInstanceName"`
	Items             ItemsInDescribeSQLLogTemplates `json:"Items" xml:"Items"`
}

// CreateDescribeSQLLogTemplatesRequest creates a request to invoke DescribeSQLLogTemplates API
func CreateDescribeSQLLogTemplatesRequest() (request *DescribeSQLLogTemplatesRequest) {
	request = &DescribeSQLLogTemplatesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "DescribeSQLLogTemplates", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeSQLLogTemplatesResponse creates a response to parse from DescribeSQLLogTemplates response
func CreateDescribeSQLLogTemplatesResponse() (response *DescribeSQLLogTemplatesResponse) {
	response = &DescribeSQLLogTemplatesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
