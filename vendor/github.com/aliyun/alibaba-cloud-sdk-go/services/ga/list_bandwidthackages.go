package ga

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListBandwidthackages invokes the ga.ListBandwidthackages API synchronously
func (client *Client) ListBandwidthackages(request *ListBandwidthackagesRequest) (response *ListBandwidthackagesResponse, err error) {
	response = CreateListBandwidthackagesResponse()
	err = client.DoAction(request, response)
	return
}

// ListBandwidthackagesWithChan invokes the ga.ListBandwidthackages API asynchronously
func (client *Client) ListBandwidthackagesWithChan(request *ListBandwidthackagesRequest) (<-chan *ListBandwidthackagesResponse, <-chan error) {
	responseChan := make(chan *ListBandwidthackagesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListBandwidthackages(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListBandwidthackagesWithCallback invokes the ga.ListBandwidthackages API asynchronously
func (client *Client) ListBandwidthackagesWithCallback(request *ListBandwidthackagesRequest, callback func(response *ListBandwidthackagesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListBandwidthackagesResponse
		var err error
		defer close(result)
		response, err = client.ListBandwidthackages(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListBandwidthackagesRequest is the request struct for api ListBandwidthackages
type ListBandwidthackagesRequest struct {
	*requests.RpcRequest
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
}

// ListBandwidthackagesResponse is the response struct for api ListBandwidthackages
type ListBandwidthackagesResponse struct {
	*responses.BaseResponse
	RequestId         string             `json:"RequestId" xml:"RequestId"`
	TotalCount        int                `json:"TotalCount" xml:"TotalCount"`
	PageNumber        int                `json:"PageNumber" xml:"PageNumber"`
	PageSize          int                `json:"PageSize" xml:"PageSize"`
	BandwidthPackages []BandwidthPackage `json:"BandwidthPackages" xml:"BandwidthPackages"`
}

// CreateListBandwidthackagesRequest creates a request to invoke ListBandwidthackages API
func CreateListBandwidthackagesRequest() (request *ListBandwidthackagesRequest) {
	request = &ListBandwidthackagesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ga", "2019-11-20", "ListBandwidthackages", "gaplus", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListBandwidthackagesResponse creates a response to parse from ListBandwidthackages response
func CreateListBandwidthackagesResponse() (response *ListBandwidthackagesResponse) {
	response = &ListBandwidthackagesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
