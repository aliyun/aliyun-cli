package scdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeScdnDdosTrafficInfo invokes the scdn.DescribeScdnDdosTrafficInfo API synchronously
func (client *Client) DescribeScdnDdosTrafficInfo(request *DescribeScdnDdosTrafficInfoRequest) (response *DescribeScdnDdosTrafficInfoResponse, err error) {
	response = CreateDescribeScdnDdosTrafficInfoResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeScdnDdosTrafficInfoWithChan invokes the scdn.DescribeScdnDdosTrafficInfo API asynchronously
func (client *Client) DescribeScdnDdosTrafficInfoWithChan(request *DescribeScdnDdosTrafficInfoRequest) (<-chan *DescribeScdnDdosTrafficInfoResponse, <-chan error) {
	responseChan := make(chan *DescribeScdnDdosTrafficInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeScdnDdosTrafficInfo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeScdnDdosTrafficInfoWithCallback invokes the scdn.DescribeScdnDdosTrafficInfo API asynchronously
func (client *Client) DescribeScdnDdosTrafficInfoWithCallback(request *DescribeScdnDdosTrafficInfoRequest, callback func(response *DescribeScdnDdosTrafficInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeScdnDdosTrafficInfoResponse
		var err error
		defer close(result)
		response, err = client.DescribeScdnDdosTrafficInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeScdnDdosTrafficInfoRequest is the request struct for api DescribeScdnDdosTrafficInfo
type DescribeScdnDdosTrafficInfoRequest struct {
	*requests.RpcRequest
	Line      string           `position:"Query" name:"Line"`
	StartTime string           `position:"Query" name:"StartTime"`
	EndTime   string           `position:"Query" name:"EndTime"`
	OwnerId   requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeScdnDdosTrafficInfoResponse is the response struct for api DescribeScdnDdosTrafficInfo
type DescribeScdnDdosTrafficInfoResponse struct {
	*responses.BaseResponse
	RequestId  string                                  `json:"RequestId" xml:"RequestId"`
	BpsDrops   BpsDrops                                `json:"BpsDrops" xml:"BpsDrops"`
	BpsTotals  BpsTotals                               `json:"BpsTotals" xml:"BpsTotals"`
	PpsTotals  PpsTotals                               `json:"PpsTotals" xml:"PpsTotals"`
	PpsDrops   PpsDrops                                `json:"PpsDrops" xml:"PpsDrops"`
	TimeScopes TimeScopesInDescribeScdnDdosTrafficInfo `json:"TimeScopes" xml:"TimeScopes"`
}

// CreateDescribeScdnDdosTrafficInfoRequest creates a request to invoke DescribeScdnDdosTrafficInfo API
func CreateDescribeScdnDdosTrafficInfoRequest() (request *DescribeScdnDdosTrafficInfoRequest) {
	request = &DescribeScdnDdosTrafficInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("scdn", "2017-11-15", "DescribeScdnDdosTrafficInfo", "", "")
	request.Method = requests.GET
	return
}

// CreateDescribeScdnDdosTrafficInfoResponse creates a response to parse from DescribeScdnDdosTrafficInfo response
func CreateDescribeScdnDdosTrafficInfoResponse() (response *DescribeScdnDdosTrafficInfoResponse) {
	response = &DescribeScdnDdosTrafficInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
