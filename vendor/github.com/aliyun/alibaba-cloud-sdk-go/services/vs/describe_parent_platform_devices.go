package vs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeParentPlatformDevices invokes the vs.DescribeParentPlatformDevices API synchronously
func (client *Client) DescribeParentPlatformDevices(request *DescribeParentPlatformDevicesRequest) (response *DescribeParentPlatformDevicesResponse, err error) {
	response = CreateDescribeParentPlatformDevicesResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeParentPlatformDevicesWithChan invokes the vs.DescribeParentPlatformDevices API asynchronously
func (client *Client) DescribeParentPlatformDevicesWithChan(request *DescribeParentPlatformDevicesRequest) (<-chan *DescribeParentPlatformDevicesResponse, <-chan error) {
	responseChan := make(chan *DescribeParentPlatformDevicesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeParentPlatformDevices(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeParentPlatformDevicesWithCallback invokes the vs.DescribeParentPlatformDevices API asynchronously
func (client *Client) DescribeParentPlatformDevicesWithCallback(request *DescribeParentPlatformDevicesRequest, callback func(response *DescribeParentPlatformDevicesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeParentPlatformDevicesResponse
		var err error
		defer close(result)
		response, err = client.DescribeParentPlatformDevices(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeParentPlatformDevicesRequest is the request struct for api DescribeParentPlatformDevices
type DescribeParentPlatformDevicesRequest struct {
	*requests.RpcRequest
	SortDirection string           `position:"Query" name:"SortDirection"`
	PageNum       requests.Integer `position:"Query" name:"PageNum"`
	PageSize      requests.Integer `position:"Query" name:"PageSize"`
	Id            string           `position:"Query" name:"Id"`
	ShowLog       string           `position:"Query" name:"ShowLog"`
	OwnerId       requests.Integer `position:"Query" name:"OwnerId"`
	SortBy        string           `position:"Query" name:"SortBy"`
}

// DescribeParentPlatformDevicesResponse is the response struct for api DescribeParentPlatformDevices
type DescribeParentPlatformDevicesResponse struct {
	*responses.BaseResponse
	RequestId  string   `json:"RequestId" xml:"RequestId"`
	PageSize   int64    `json:"PageSize" xml:"PageSize"`
	PageNum    int64    `json:"PageNum" xml:"PageNum"`
	PageCount  int64    `json:"PageCount" xml:"PageCount"`
	TotalCount int64    `json:"TotalCount" xml:"TotalCount"`
	Devices    []Device `json:"Devices" xml:"Devices"`
}

// CreateDescribeParentPlatformDevicesRequest creates a request to invoke DescribeParentPlatformDevices API
func CreateDescribeParentPlatformDevicesRequest() (request *DescribeParentPlatformDevicesRequest) {
	request = &DescribeParentPlatformDevicesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vs", "2018-12-12", "DescribeParentPlatformDevices", "vs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeParentPlatformDevicesResponse creates a response to parse from DescribeParentPlatformDevices response
func CreateDescribeParentPlatformDevicesResponse() (response *DescribeParentPlatformDevicesResponse) {
	response = &DescribeParentPlatformDevicesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
