package subscription

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateWebhook invokes the subscription.CreateWebhook API synchronously
// api document: https://help.aliyun.com/api/subscription/createwebhook.html
func (client *Client) CreateWebhook(request *CreateWebhookRequest) (response *CreateWebhookResponse, err error) {
	response = CreateCreateWebhookResponse()
	err = client.DoAction(request, response)
	return
}

// CreateWebhookWithChan invokes the subscription.CreateWebhook API asynchronously
// api document: https://help.aliyun.com/api/subscription/createwebhook.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateWebhookWithChan(request *CreateWebhookRequest) (<-chan *CreateWebhookResponse, <-chan error) {
	responseChan := make(chan *CreateWebhookResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateWebhook(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateWebhookWithCallback invokes the subscription.CreateWebhook API asynchronously
// api document: https://help.aliyun.com/api/subscription/createwebhook.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateWebhookWithCallback(request *CreateWebhookRequest, callback func(response *CreateWebhookResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateWebhookResponse
		var err error
		defer close(result)
		response, err = client.CreateWebhook(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateWebhookRequest is the request struct for api CreateWebhook
type CreateWebhookRequest struct {
	*requests.RpcRequest
	ClientToken string `position:"Query" name:"ClientToken"`
	Locale      string `position:"Query" name:"Locale"`
	ServerUrl   string `position:"Body" name:"ServerUrl"`
	Name        string `position:"Body" name:"Name"`
}

// CreateWebhookResponse is the response struct for api CreateWebhook
type CreateWebhookResponse struct {
	*responses.BaseResponse
	WebhookId int64  `json:"WebhookId" xml:"WebhookId"`
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Code      string `json:"Code" xml:"Code"`
	Success   bool   `json:"Success" xml:"Success"`
}

// CreateCreateWebhookRequest creates a request to invoke CreateWebhook API
func CreateCreateWebhookRequest() (request *CreateWebhookRequest) {
	request = &CreateWebhookRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Subscription", "2021-01-15", "CreateWebhook", "", "")
	return
}

// CreateCreateWebhookResponse creates a response to parse from CreateWebhook response
func CreateCreateWebhookResponse() (response *CreateWebhookResponse) {
	response = &CreateWebhookResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
