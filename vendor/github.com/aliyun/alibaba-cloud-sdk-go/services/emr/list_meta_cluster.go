package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListMetaCluster invokes the emr.ListMetaCluster API synchronously
func (client *Client) ListMetaCluster(request *ListMetaClusterRequest) (response *ListMetaClusterResponse, err error) {
	response = CreateListMetaClusterResponse()
	err = client.DoAction(request, response)
	return
}

// ListMetaClusterWithChan invokes the emr.ListMetaCluster API asynchronously
func (client *Client) ListMetaClusterWithChan(request *ListMetaClusterRequest) (<-chan *ListMetaClusterResponse, <-chan error) {
	responseChan := make(chan *ListMetaClusterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListMetaCluster(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListMetaClusterWithCallback invokes the emr.ListMetaCluster API asynchronously
func (client *Client) ListMetaClusterWithCallback(request *ListMetaClusterRequest, callback func(response *ListMetaClusterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListMetaClusterResponse
		var err error
		defer close(result)
		response, err = client.ListMetaCluster(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListMetaClusterRequest is the request struct for api ListMetaCluster
type ListMetaClusterRequest struct {
	*requests.RpcRequest
	ResourceOwnerId requests.Integer `position:"Query" name:"ResourceOwnerId"`
	PageNumber      requests.Integer `position:"Query" name:"PageNumber"`
	PageSize        requests.Integer `position:"Query" name:"PageSize"`
	SourceType      string           `position:"Query" name:"SourceType"`
}

// ListMetaClusterResponse is the response struct for api ListMetaCluster
type ListMetaClusterResponse struct {
	*responses.BaseResponse
	RequestId  string                 `json:"RequestId" xml:"RequestId"`
	PageNumber int                    `json:"PageNumber" xml:"PageNumber"`
	PageSize   int                    `json:"PageSize" xml:"PageSize"`
	TotalCount int                    `json:"TotalCount" xml:"TotalCount"`
	Items      ItemsInListMetaCluster `json:"Items" xml:"Items"`
}

// CreateListMetaClusterRequest creates a request to invoke ListMetaCluster API
func CreateListMetaClusterRequest() (request *ListMetaClusterRequest) {
	request = &ListMetaClusterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListMetaCluster", "emr", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListMetaClusterResponse creates a response to parse from ListMetaCluster response
func CreateListMetaClusterResponse() (response *ListMetaClusterResponse) {
	response = &ListMetaClusterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
