package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateFlowEditLock invokes the emr.CreateFlowEditLock API synchronously
func (client *Client) CreateFlowEditLock(request *CreateFlowEditLockRequest) (response *CreateFlowEditLockResponse, err error) {
	response = CreateCreateFlowEditLockResponse()
	err = client.DoAction(request, response)
	return
}

// CreateFlowEditLockWithChan invokes the emr.CreateFlowEditLock API asynchronously
func (client *Client) CreateFlowEditLockWithChan(request *CreateFlowEditLockRequest) (<-chan *CreateFlowEditLockResponse, <-chan error) {
	responseChan := make(chan *CreateFlowEditLockResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateFlowEditLock(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateFlowEditLockWithCallback invokes the emr.CreateFlowEditLock API asynchronously
func (client *Client) CreateFlowEditLockWithCallback(request *CreateFlowEditLockRequest, callback func(response *CreateFlowEditLockResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateFlowEditLockResponse
		var err error
		defer close(result)
		response, err = client.CreateFlowEditLock(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateFlowEditLockRequest is the request struct for api CreateFlowEditLock
type CreateFlowEditLockRequest struct {
	*requests.RpcRequest
	ResourceOwnerId requests.Integer `position:"Query" name:"ResourceOwnerId"`
	EntityId        string           `position:"Query" name:"EntityId"`
	Force           requests.Boolean `position:"Query" name:"Force"`
}

// CreateFlowEditLockResponse is the response struct for api CreateFlowEditLock
type CreateFlowEditLockResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	BizId     string `json:"BizId" xml:"BizId"`
	EntityId  string `json:"EntityId" xml:"EntityId"`
	Status    string `json:"Status" xml:"Status"`
	OwnerId   string `json:"OwnerId" xml:"OwnerId"`
	UserId    string `json:"UserId" xml:"UserId"`
}

// CreateCreateFlowEditLockRequest creates a request to invoke CreateFlowEditLock API
func CreateCreateFlowEditLockRequest() (request *CreateFlowEditLockRequest) {
	request = &CreateFlowEditLockRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "CreateFlowEditLock", "emr", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateFlowEditLockResponse creates a response to parse from CreateFlowEditLock response
func CreateCreateFlowEditLockResponse() (response *CreateFlowEditLockResponse) {
	response = &CreateFlowEditLockResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
