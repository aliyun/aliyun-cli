package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListMetaDataSourceClusterForOuter invokes the emr.ListMetaDataSourceClusterForOuter API synchronously
func (client *Client) ListMetaDataSourceClusterForOuter(request *ListMetaDataSourceClusterForOuterRequest) (response *ListMetaDataSourceClusterForOuterResponse, err error) {
	response = CreateListMetaDataSourceClusterForOuterResponse()
	err = client.DoAction(request, response)
	return
}

// ListMetaDataSourceClusterForOuterWithChan invokes the emr.ListMetaDataSourceClusterForOuter API asynchronously
func (client *Client) ListMetaDataSourceClusterForOuterWithChan(request *ListMetaDataSourceClusterForOuterRequest) (<-chan *ListMetaDataSourceClusterForOuterResponse, <-chan error) {
	responseChan := make(chan *ListMetaDataSourceClusterForOuterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListMetaDataSourceClusterForOuter(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListMetaDataSourceClusterForOuterWithCallback invokes the emr.ListMetaDataSourceClusterForOuter API asynchronously
func (client *Client) ListMetaDataSourceClusterForOuterWithCallback(request *ListMetaDataSourceClusterForOuterRequest, callback func(response *ListMetaDataSourceClusterForOuterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListMetaDataSourceClusterForOuterResponse
		var err error
		defer close(result)
		response, err = client.ListMetaDataSourceClusterForOuter(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListMetaDataSourceClusterForOuterRequest is the request struct for api ListMetaDataSourceClusterForOuter
type ListMetaDataSourceClusterForOuterRequest struct {
	*requests.RpcRequest
	ResourceOwnerId requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ClusterId       *[]string        `position:"Query" name:"ClusterId"  type:"Repeated"`
	UserId          string           `position:"Query" name:"UserId"`
	PageNumber      requests.Integer `position:"Query" name:"PageNumber"`
	DataSourceId    *[]string        `position:"Query" name:"DataSourceId"  type:"Repeated"`
	PageSize        requests.Integer `position:"Query" name:"PageSize"`
}

// ListMetaDataSourceClusterForOuterResponse is the response struct for api ListMetaDataSourceClusterForOuter
type ListMetaDataSourceClusterForOuterResponse struct {
	*responses.BaseResponse
	RequestId  string                                   `json:"RequestId" xml:"RequestId"`
	PageNumber int                                      `json:"PageNumber" xml:"PageNumber"`
	PageSize   int                                      `json:"PageSize" xml:"PageSize"`
	TotalCount int                                      `json:"TotalCount" xml:"TotalCount"`
	Items      ItemsInListMetaDataSourceClusterForOuter `json:"Items" xml:"Items"`
}

// CreateListMetaDataSourceClusterForOuterRequest creates a request to invoke ListMetaDataSourceClusterForOuter API
func CreateListMetaDataSourceClusterForOuterRequest() (request *ListMetaDataSourceClusterForOuterRequest) {
	request = &ListMetaDataSourceClusterForOuterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListMetaDataSourceClusterForOuter", "emr", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListMetaDataSourceClusterForOuterResponse creates a response to parse from ListMetaDataSourceClusterForOuter response
func CreateListMetaDataSourceClusterForOuterResponse() (response *ListMetaDataSourceClusterForOuterResponse) {
	response = &ListMetaDataSourceClusterForOuterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
