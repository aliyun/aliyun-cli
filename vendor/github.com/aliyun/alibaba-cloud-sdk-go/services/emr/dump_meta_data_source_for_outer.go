package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DumpMetaDataSourceForOuter invokes the emr.DumpMetaDataSourceForOuter API synchronously
func (client *Client) DumpMetaDataSourceForOuter(request *DumpMetaDataSourceForOuterRequest) (response *DumpMetaDataSourceForOuterResponse, err error) {
	response = CreateDumpMetaDataSourceForOuterResponse()
	err = client.DoAction(request, response)
	return
}

// DumpMetaDataSourceForOuterWithChan invokes the emr.DumpMetaDataSourceForOuter API asynchronously
func (client *Client) DumpMetaDataSourceForOuterWithChan(request *DumpMetaDataSourceForOuterRequest) (<-chan *DumpMetaDataSourceForOuterResponse, <-chan error) {
	responseChan := make(chan *DumpMetaDataSourceForOuterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DumpMetaDataSourceForOuter(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DumpMetaDataSourceForOuterWithCallback invokes the emr.DumpMetaDataSourceForOuter API asynchronously
func (client *Client) DumpMetaDataSourceForOuterWithCallback(request *DumpMetaDataSourceForOuterRequest, callback func(response *DumpMetaDataSourceForOuterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DumpMetaDataSourceForOuterResponse
		var err error
		defer close(result)
		response, err = client.DumpMetaDataSourceForOuter(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DumpMetaDataSourceForOuterRequest is the request struct for api DumpMetaDataSourceForOuter
type DumpMetaDataSourceForOuterRequest struct {
	*requests.RpcRequest
	ResourceOwnerId  requests.Integer `position:"Query" name:"ResourceOwnerId"`
	DumpAllDatabase  requests.Boolean `position:"Query" name:"DumpAllDatabase"`
	DumpLimit        requests.Integer `position:"Query" name:"DumpLimit"`
	ClusterId        string           `position:"Query" name:"ClusterId"`
	DumpAllTable     requests.Boolean `position:"Query" name:"DumpAllTable"`
	PartitionValues  *[]string        `position:"Query" name:"PartitionValues"  type:"Repeated"`
	TableId          string           `position:"Query" name:"TableId"`
	DatabaseId       string           `position:"Query" name:"DatabaseId"`
	DumpAllPartition requests.Boolean `position:"Query" name:"DumpAllPartition"`
}

// DumpMetaDataSourceForOuterResponse is the response struct for api DumpMetaDataSourceForOuter
type DumpMetaDataSourceForOuterResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	TaskId    string `json:"TaskId" xml:"TaskId"`
}

// CreateDumpMetaDataSourceForOuterRequest creates a request to invoke DumpMetaDataSourceForOuter API
func CreateDumpMetaDataSourceForOuterRequest() (request *DumpMetaDataSourceForOuterRequest) {
	request = &DumpMetaDataSourceForOuterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "DumpMetaDataSourceForOuter", "emr", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDumpMetaDataSourceForOuterResponse creates a response to parse from DumpMetaDataSourceForOuter response
func CreateDumpMetaDataSourceForOuterResponse() (response *DumpMetaDataSourceForOuterResponse) {
	response = &DumpMetaDataSourceForOuterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
