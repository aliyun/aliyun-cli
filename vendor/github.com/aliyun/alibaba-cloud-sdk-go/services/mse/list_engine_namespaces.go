package mse

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListEngineNamespaces invokes the mse.ListEngineNamespaces API synchronously
func (client *Client) ListEngineNamespaces(request *ListEngineNamespacesRequest) (response *ListEngineNamespacesResponse, err error) {
	response = CreateListEngineNamespacesResponse()
	err = client.DoAction(request, response)
	return
}

// ListEngineNamespacesWithChan invokes the mse.ListEngineNamespaces API asynchronously
func (client *Client) ListEngineNamespacesWithChan(request *ListEngineNamespacesRequest) (<-chan *ListEngineNamespacesResponse, <-chan error) {
	responseChan := make(chan *ListEngineNamespacesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListEngineNamespaces(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListEngineNamespacesWithCallback invokes the mse.ListEngineNamespaces API asynchronously
func (client *Client) ListEngineNamespacesWithCallback(request *ListEngineNamespacesRequest, callback func(response *ListEngineNamespacesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListEngineNamespacesResponse
		var err error
		defer close(result)
		response, err = client.ListEngineNamespaces(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListEngineNamespacesRequest is the request struct for api ListEngineNamespaces
type ListEngineNamespacesRequest struct {
	*requests.RpcRequest
	ClusterId  string           `position:"Query" name:"ClusterId"`
	PageNum    requests.Integer `position:"Query" name:"PageNum"`
	InstanceId string           `position:"Query" name:"InstanceId"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
}

// ListEngineNamespacesResponse is the response struct for api ListEngineNamespaces
type ListEngineNamespacesResponse struct {
	*responses.BaseResponse
	RequestId  string      `json:"RequestId" xml:"RequestId"`
	Success    bool        `json:"Success" xml:"Success"`
	Message    string      `json:"Message" xml:"Message"`
	ErrorCode  string      `json:"ErrorCode" xml:"ErrorCode"`
	PageNumber int         `json:"PageNumber" xml:"PageNumber"`
	PageSize   int         `json:"PageSize" xml:"PageSize"`
	TotalCount int         `json:"TotalCount" xml:"TotalCount"`
	HttpCode   string      `json:"HttpCode" xml:"HttpCode"`
	Data       []Namespace `json:"Data" xml:"Data"`
}

// CreateListEngineNamespacesRequest creates a request to invoke ListEngineNamespaces API
func CreateListEngineNamespacesRequest() (request *ListEngineNamespacesRequest) {
	request = &ListEngineNamespacesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("mse", "2019-05-31", "ListEngineNamespaces", "", "")
	request.Method = requests.GET
	return
}

// CreateListEngineNamespacesResponse creates a response to parse from ListEngineNamespaces response
func CreateListEngineNamespacesResponse() (response *ListEngineNamespacesResponse) {
	response = &ListEngineNamespacesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
